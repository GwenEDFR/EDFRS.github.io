{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Monthly Report for BESS KPI","text":"<p>This project is the property of EDF Renewable Storage - Berlin </p> <p>Welcome in the documentation of the monthly report for BESS KPI code. Let's get a tour !</p>"},{"location":"#requirements","title":"Requirements","text":"<p>\u26a0\ufe0f Python version 3.11.9 is required for use this code. Please make sure you have the good version tuto How to update Python on Windows.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>If it's the first time you see this code, I recommend you to go directly in the section Getting started. You'll find everything you for start correctly this project and use it. </p>"},{"location":"#tool-development","title":"Tool development","text":"<p>For those how are not new here and want to modify this code. I'll recomend you to visit the section Developper guide. You'll find everything you need for deploy/change/use this code. By the same time, you'll find lot of information regarding the existing class and method in the libraries section.</p> <p>And most important don't forget to enjoy your croissant \ud83e\udd50 when all report are created !</p>"},{"location":"About/","title":"About","text":""},{"location":"About/release_notes/","title":"Realeased Notes","text":"<p>Not up to date, see directly on the GitHub repository activity</p>"},{"location":"About/release_notes/#version-230","title":"Version 2.3.0","text":"<p>Released the 27 May 2024 New version for: </p> <ul> <li> <p>HLZ.py  Improve the flexibility for new project. </p> </li> <li> <p>Parameters_project.py Improve the flexibility for new project. </p> </li> </ul>"},{"location":"About/release_notes/#version-220","title":"Version 2.2.0","text":"<p>Released the 17 May 2024 KPI add for print :</p> <ul> <li> <p>Period_time per month </p> </li> <li> <p>Period_time_overview </p> </li> </ul>"},{"location":"About/release_notes/#version-210","title":"Version 2.1.0","text":"<p>Released the 14 May 2024 Project supported add : </p> <ul> <li>TANN (2024)</li> </ul>"},{"location":"About/release_notes/#version-200","title":"Version 2.0.0","text":"<p>Released the 24 April 2024 Project supported add : </p> <ul> <li>WERN (2024)</li> </ul> <p>Improvement of the design for PDF report (nice picture now). Add a new way to sorted KPI plot, excel in Data&gt;data_project.</p>"},{"location":"About/release_notes/#version-120","title":"Version 1.2.0","text":"<p>Released the 12 march 2024 KPI add for print :</p> <ul> <li> <p>energy_sorted</p> </li> <li> <p>soc_sorted</p> </li> </ul>"},{"location":"About/release_notes/#version-110","title":"Version 1.1.0","text":"<p>Released the 09 march 2024 Project supported for data : </p> <ul> <li> <p>HYHA (2023, 2024)</p> </li> <li> <p>BREM (2024)</p> </li> </ul> <p>KPI available for print :</p> <ul> <li> <p>summary</p> </li> <li> <p>overview</p> </li> <li> <p>load_max</p> </li> <li> <p>analyze_load</p> </li> <li> <p>peak_miss</p> </li> <li> <p>availability</p> </li> <li> <p>energy_poc</p> </li> <li> <p>number_cycle</p> </li> <li> <p>soc_plot</p> </li> <li> <p>aux_plot</p> </li> <li> <p>aux_content</p> </li> <li> <p>aux_energy</p> </li> <li> <p>event_count</p> </li> <li> <p>event_day</p> </li> <li> <p>event_energy</p> </li> </ul>"},{"location":"About/Issues/","title":"Issues","text":""},{"location":"About/Issues/lib_issues/","title":"Kaleido image export issues","text":"<p>When export issues with pio.to_image only.\\ If no file is created or your code run in void, you'll need this .whl to fixed the engine kaleido. This issue is only for windows laptop, mac and linux don't have this issue.</p> <ol> <li>Download the file kaleido-0.1.0.post1-py2.py3-none-win_amd64.whl (for windows 10 in amd 64). You can download it here</li> <li> <p>Copy the file in your name_of_venv folder and switch into it (<code>cd name_of_venv</code>)\\</p> </li> <li> <p>Install this librarie in your venv</p> </li> </ol> <pre><code>pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org -U kaleido-0.1.0.post1-py2.py3-none-win_amd64.whl\n</code></pre>"},{"location":"librairies/","title":"Librairies","text":""},{"location":"librairies/UI_lib/","title":"UI Library","text":"<p>Library use only for the UI purpose. </p>"},{"location":"librairies/UI_lib/UI_project/","title":"UI projects","text":""},{"location":"librairies/UI_lib/UI_project/#dependencies","title":"Dependencies","text":"Librairies version pandas -"},{"location":"librairies/UI_lib/UI_project/#class-project_init","title":"Class project_init","text":"<p>A class used for initializing a project.</p>"},{"location":"librairies/UI_lib/UI_project/#initself-project-year","title":"init(self, project, year)","text":"<p>Initialize the <code>project_init</code> class.</p> <p>Parameters:</p> <ul> <li> <p><code>project</code> (str): The project name.</p> </li> <li> <p><code>year</code> (str): The year of the project.</p> </li> </ul> <p>Returns:</p> <p>None</p>"},{"location":"librairies/UI_lib/UI_project/#init_startself-data_path","title":"init_start(self, data_path)","text":"<p>Initialize the project by importing data and setting the HLZ.</p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): General information.</p> </li> <li> <p><code>data_path</code> (str): Path to the data.</p> </li> </ul> <p>Returns:</p> <ul> <li> <p><code>database</code> (df): Database with all information of this project.</p> </li> <li> <p><code>first_data_time</code> (date): Date of the first data of the database.</p> </li> <li> <p><code>last_data_time</code> (date): Date of the last data of the database.</p> </li> </ul> <p>Example:</p> <pre><code>from project import project_init\nproject = \"Sample Project\"\nyear = \"2022\"\ndata_path = \"path/to/data\"\n# Call the method\nproject_obj = project_init(project, year)\ndatabase, first_data_time, last_data_time = project_obj.init_start(data_path)\n\n#Print the result\nprint(database)\nprint(first_data_time)\nprint(last_data_time)\n</code></pre>"},{"location":"librairies/UI_lib/UI_tools/","title":"UI tools","text":""},{"location":"librairies/UI_lib/UI_tools/#dependencies","title":"Dependencies","text":"Librairies version pandas - shutil -"},{"location":"librairies/UI_lib/UI_tools/#summary","title":"Summary","text":"<p>Methods used by the UI for simple tasks. </p>"},{"location":"librairies/UI_lib/UI_tools/#methods","title":"Methods","text":""},{"location":"librairies/UI_lib/UI_tools/#get_month_dfdatabase","title":"get_month_df(database)","text":"<p>Used to get the list of month present in the database. </p> <p>Parameters:</p> <ul> <li><code>database</code> (df): Database where the column month is. </li> </ul> <p>Returns:</p> <ul> <li><code>list_month</code> (array): List of months inside the dataframe</li> </ul> <p>Examples:</p> <pre><code>import UI_tools \n# Create a sample database\ndata = {'month': [1, 2, 3, 4, 3, 2, 2, 4]}\nsales_data = pd.DataFrame(data)\n\n# Call the function with the sales_data database\nunique_months = UI_tools.get_month_df(sales_data)\n\n# Print the unique months\nprint(unique_months)\n&gt;&gt; ['1','2','3','4']\n</code></pre>"},{"location":"librairies/UI_lib/UI_tools/#clear_folderpath-nofile_okfalse","title":"clear_folder(path, noFile_ok=False)","text":"<p>Clears the file or folder in the given path.</p> <p>Parameters:</p> <ul> <li> <p><code>path</code> (str): Path to clear.</p> </li> <li> <p><code>noFile_ok</code> (bool, default: False): Raises an error if there are no files/folders in the path if set to False.</p> </li> </ul> <p>Returns:</p> <p>None</p> <p>Raises:</p> <ul> <li><code>ValueError</code>: If <code>noFile_ok</code> is set to False and there are no files or folders in the path.</li> </ul> <p>Examples:</p> <pre><code>import UI_tools\n# Example usage\nfolder_path = \"path/to/folder\"\nUI_tools.clear_folder(folder_path, noFile_ok=True)\n\n# If the folder path is not a file or a folder\nUI_tools.clear_folder(folder_path, noFile_ok=False)\n&gt;&gt; ValueError: file path/to/folder is not a file or dir.\n</code></pre>"},{"location":"librairies/kpi_lib/","title":"KPI_lib","text":""},{"location":"librairies/kpi_lib/#main-file","title":"Main file","text":"<ol> <li> <p><code>KPI</code></p> <p>FCR Basic  2. <code>import KPI</code> 3. <code>HLZ</code> 4. <code>KPI</code> 5. <code>KPI plot</code> 6. <code>Export KPI</code></p> </li> </ol>"},{"location":"librairies/kpi_lib/export_kpi/","title":"Export KPI","text":""},{"location":"librairies/kpi_lib/export_kpi/#dependencies","title":"Dependencies","text":"Librairies version KPI_plot.py (local) - parameters_project.py (local) - inspect - pandas 2.2.1 pathlib.Path - plotly.io.pio 5.20.0 os - tqdm.tqdm 4.66.2"},{"location":"librairies/kpi_lib/export_kpi/#summary","title":"Summary","text":"<p>Class used to export and create list of KPI object. Used for export the appendix, and create the \"list_fig\" which contain main information for KPIs. class_name : export_data method availaible : * download_KPIs * show_KPIs * show_KPI_filtered * download_KPI_filtered </p>"},{"location":"librairies/kpi_lib/export_kpi/#class","title":"Class","text":""},{"location":"librairies/kpi_lib/export_kpi/#__init__self-database-project-year-month_short-none","title":"__init__(self, database, project, year, month_short) -&gt; None","text":"<p>Initializes an instance of the class. Parameters:</p> <ul> <li> <p><code>database</code> (str): The name of the database.</p> </li> <li> <p><code>project</code> (str): The name of the project.</p> </li> <li> <p><code>year</code> (str): The year for the project.</p> </li> <li> <p><code>month_short</code> (str): Month short of the current month selected</p> </li> </ul> <p>Returns: </p> <ul> <li><code>nan</code> (None) :     No return value</li> </ul> <p>Example: </p> <pre><code># Create an instance of the class\ndatabase = \"example_database\"\nproject = \"example_project\"\nyear = \"2022\"\nobj = export_data(database, project, year)\n\n# Access the attributes\nprint(\"database:\", obj.database)\nprint(\"project:\", obj.project)\nprint(\"year:\", obj.year)\nprint(\"year_short:\", obj.year_short)\n</code></pre>"},{"location":"librairies/kpi_lib/export_kpi/#get_methodsself","title":"get_methods(self)","text":"<p>Intern Module to get all name of methods from KPI_plot.</p> <p>Parameter:</p> <ul> <li><code>self</code> (self) :     General information</li> </ul> <p>Returns:</p> <ul> <li> <p><code>fig_store</code> (df) :     DataFrame with names and categories of KPI</p> </li> <li> <p><code>plot_method</code> (array) :     Array with all methods from KPI_plot module</p> </li> <li> <p><code>def_plot</code> (module) :     Module of plot_KPI in order to get the methods from it</p> </li> </ul> <p>Example: </p> <pre><code># Create an instance of the class\nobj = export_data(database, project, year, month_short)\n\n# Call the get_methods method\nfig_store, plot_method, def_plot = obj.get_methods()\n\n# Print the results\nprint(\"fig_store:\", fig_store)\nprint(\"plot_method:\", plot_method)\nprint(\"def_plot:\", def_plot)\n</code></pre>"},{"location":"librairies/kpi_lib/export_kpi/#export_appendixself-path_export","title":"export_appendix(self, path_export):","text":"<p>Module to export data and format it.</p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): General information </p> </li> <li> <p><code>path_export</code> (str): Path where to export the excel file. </p> </li> </ul> <p>Returns: - <code>nan</code> (None) :     No return value</p> <p>Example: </p> <pre><code># Create an instance of the class\nobj = export_data(database, project, year, month_short)\n\n# Call the method\nobj.export_appendix('./appendix/')\n&gt;&gt; KPI appendix will be export.\n&gt;&gt; Your KPI appendix is exported, you can found the file here : ./appendix/\n</code></pre>"},{"location":"librairies/kpi_lib/export_kpi/#get_list_figself","title":"get_list_fig(self)","text":"<p>Create the list_fig which will create a dataframe with names, categories and KPI object.  Long computation warning, need to cache if possible. </p> <p>Parameters:</p> <ul> <li><code>self</code> (self) :     General information</li> </ul> <p>Returns:</p> <ul> <li><code>list_fig</code> (pd.Dataframe): dataframe with columns ['name','category','object']<ul> <li>list_fig['name'] (str): Name of the KPI</li> <li>list_fig['category'] (str): Name of the category of the KPI</li> <li>list_fig['object'] (KPI.KPI_fig object): Object of the KPI (more details here) </li> </ul> </li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = export_data(database, project, year, month_short)\n\n# Call the export_KPI method\nfig_list = obj.get_list_fig()\n</code></pre>"},{"location":"librairies/kpi_lib/export_kpi/#method","title":"Method","text":""},{"location":"librairies/kpi_lib/export_kpi/#download_kpisfig_list-pathstr-typepng-width1200-height800-scale2","title":"download_KPIs(fig_list, path:str, type='png', width=1200, height=800, scale=2)","text":"<p>Method for download all the figure from the given fig_list. </p> <p>Parameter:</p> <ul> <li> <p><code>fig_list</code> (df): List of figures to add in the KPI. Need to have column ['name', 'category', 'object']. Get this list from export_data.get_list_fig.</p> </li> <li> <p><code>path</code> (str): Path where to store the png plot</p> </li> <li> <p><code>type</code> (str): Type of file selected (Default : png)</p> <ul> <li>png</li> <li>svg</li> <li>jpg</li> <li>webp</li> <li>pdf</li> <li>eps</li> </ul> </li> <li> <p><code>height</code> (int): Height of the image (Default : 800)</p> </li> <li> <p><code>width</code> (int): Width of the image (Default : 1200)</p> </li> <li> <p><code>scale</code> (int): Scale of the image (Default : 2)</p> </li> </ul> <p>Returns:</p> <ul> <li><code>nan</code> (None) :     No return value</li> </ul> <p>Example: </p> <pre><code>import export_KPI\n# Call the method\nexport_KPI.download_KPIs(fig_list, './plot_img/')\n&gt;&gt; KPI plot will be exported.\n&gt;&gt; [88888888______] progress bar\n&gt;&gt; Your KPI plot are exported, you can found them here : './plot_img/\n</code></pre>"},{"location":"librairies/kpi_lib/export_kpi/#download_kpi_filteredfig_list-category_to_download-pathstr-typepng-width1200-height800-scale2","title":"download_KPI_filtered(fig_list, category_to_download, path:str, type='png', width=1200, height=800, scale=2)","text":"<p>Method for download the figure from a particular categorie from the given fig_list. </p> <p>Parameter:</p> <ul> <li> <p><code>fig_list</code> (df): List of figures to add in the KPI. Need to have column ['name', 'category', 'object']. Get this list from export_data.get_list_fig.</p> </li> <li> <p><code>category_to_download</code> (str): Name of the category to plot</p> </li> <li> <p><code>path</code> (str): Path where to store the png plot</p> </li> <li> <p><code>type</code> (str): Type of file selected (Default : png)</p> <ul> <li>png</li> <li>svg</li> <li>jpg</li> <li>webp</li> <li>pdf</li> <li>eps</li> </ul> </li> <li> <p><code>height</code> (int): Height of the image (Default : 800)</p> </li> <li> <p><code>width</code> (int): Width of the image (Default : 1200)</p> </li> <li> <p><code>scale</code> (int): Scale of the image (Default : 2)</p> </li> </ul> <p>Returns:</p> <ul> <li><code>nan</code> (None) :     No return value</li> </ul> <p>Example: </p> <pre><code>import export_KPI\n# Call the method\nexport_KPI.download_KPI_filtered(fig_list,'1_Overview', './plot_img/')\n&gt;&gt; KPI plot will be exported.\n&gt;&gt; [88888888______] progress bar\n&gt;&gt; Your KPI plot are exported, you can found them here : './plot_img/\n</code></pre>"},{"location":"librairies/kpi_lib/export_kpi/#show_kpisfig_list","title":"show_KPIs(fig_list)","text":"<p>Method for show all the figure from the given fig_list. </p> <p>Parameter:</p> <ul> <li><code>fig_list</code> (df): List of figures to add in the KPI. Need to have column ['name', 'category', 'object']. Get this list from export_data.get_list_fig.</li> </ul> <p>Returns:</p> <ul> <li><code>nan</code> (None) :     No return value</li> </ul> <p>Example: </p> <pre><code>import export_KPI\n# Call the method\nexport_KPI.show_KPIs(fig_list)\n</code></pre> ... ..."},{"location":"librairies/kpi_lib/export_kpi/#show_kpi_filteredfig_list-category_to_plot","title":"show_KPI_filtered(fig_list, category_to_plot)","text":"<p>Method for show all the figure of a specific category from the given fig_list. </p> <p>Parameter:</p> <ul> <li> <p><code>fig_list</code> (df): List of figures to add in the KPI. Need to have column ['name', 'category', 'object']. Get this list from export_data.get_list_fig.</p> </li> <li> <p><code>category_to_plot</code> (str): Name of the category to plot</p> </li> </ul> <p>Returns:</p> <ul> <li><code>nan</code> (None) :     No return value</li> </ul> <p>Example: </p> <pre><code>import export_KPI\n# Call the method\nexport_KPI.show_KPI_filtered(fig_list, '2_warranties')\n</code></pre> ..."},{"location":"librairies/kpi_lib/hlz/","title":"HLZ","text":""},{"location":"librairies/kpi_lib/hlz/#dependencies","title":"Dependencies","text":"Librairies version numpy 1.26.4 datetime -"},{"location":"librairies/kpi_lib/hlz/#summary","title":"Summary","text":"<p>Class for the creation of the period FCR, on peak, off peak of each project. class_name : set_period</p>"},{"location":"librairies/kpi_lib/hlz/#set_period","title":"Set_period","text":""},{"location":"librairies/kpi_lib/hlz/#__init__self-projectstr-year-none","title":"__init__(self, project:str, year) -&gt; None","text":"<p>Initialize the class.</p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>project</code> (str): The project name.</p> </li> <li> <p><code>year</code> (str): The year of the project.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>None</code> (None):     No return value.</li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = HLZ.set_period('HYHA', '2024')\n\n# Access the attribute\nprint(\"project selected:\", obj.project)\n</code></pre>"},{"location":"librairies/kpi_lib/hlz/#mainself-database","title":"main(self, database)","text":"<p>Add the period time in the project. Compute automaticaly the On peak period and the FCR bid. If data from E2M available (folder E2M in data) compare the real bid registered. </p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>database</code> (df): Database of the selected project.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>database</code> (df): Database of the selected project with HLZ period. Add in the HLZ column.</li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = HLZ.set_period('HYHA', '2024')\n\n# Call the method\ndf = obj.main(database)\n\nprint(\"HLZ of this project:\", df['HLZ'])\n</code></pre>"},{"location":"librairies/kpi_lib/hlz/#mask_periodself-df-database","title":"mask_period(self, df, database)","text":"<p>Create the mask for period on this project</p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>df</code> (df): With all informations for On peak and FCR mask</p> </li> <li> <p><code>database</code> (df): Database of the selected project.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>database</code> (df): Database of the selected project with HLZ period. Add in the HLZ column.</li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = HLZ.set_period('HYHA', '2024')\n\n# Create a sample dataframe 'df' with information for On peak and FCR mask\ndf = pd.DataFrame({\n    'On-Peak Start': [time(8, 0), time(13, 0)],\n    'On-Peak Stop': [time(10, 0), time(15, 0)],\n    'FCR_slots': [time(9, 0), time(14, 0)],\n    'month': [1, 2]\n})\n\n# Create a sample dataframe 'database' with the selected project's database\ndatabase = pd.DataFrame({\n    'Date': pd.date_range(start='1/1/2022', periods=10),\n    'Value': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\n})\n\n# Call the mask_period method and pass the 'df' and 'database' as arguments\nresult = obj.mask_period(df, database)\n\n# Print the updated 'database' dataframe with the 'HLZ' column added\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/hlz/#get_on_peak_hoursself","title":"get_On_peak_hours(self)","text":"<p>Read the On peak hours from overview and format it.</p> <p>Parameters:</p> <ul> <li><code>none</code>: No parameters required.</li> </ul> <p>Returns:</p> <ul> <li> <p><code>on_peak_start</code> (np.array): Array with start On peak period.</p> </li> <li> <p><code>on_peak_stop</code> (np.array): Array with stop On peak period.</p> </li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = HLZ.set_period('HYHA', '2024')\n\n# Call the get_On_peak_hours method\nstart_times, stop_times = obj.get_On_peak_hours()\n\n# Print the start and stop times\nprint(start_times)\nprint(stop_times)\n</code></pre>"},{"location":"librairies/kpi_lib/hlz/#get_fcr_hoursself-df","title":"get_FCR_hours(self, df)","text":"<p>Compute the FCR slot hours, regarding the On peak hours.</p> <p>Parameters:</p> <ul> <li><code>df</code> (df): DataFrame with all information for On peak and FCR mask.</li> </ul> <p>Returns:</p> <ul> <li><code>df</code> (df): DataFrame with all information for On peak and FCR mask + FCR slot column.</li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = HLZ.set_period('HYHA', '2024')\n\n# Create a sample dataframe 'df' with information for On peak and FCR mask\ndf = pd.DataFrame({\n    'On-Peak Start': [time(8, 0), time(13, 0)],\n    'On-Peak Stop': [time(10, 0), time(15, 0)]\n})\n\n# Call the get_FCR_hours method and pass the 'df' as an argument\nresult = obj.get_FCR_hours(df)\n\n# Print the updated 'df' dataframe with the 'FCR_slots' column added\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/hlz/#double_verification_e2mself-database","title":"double_verification_E2M(self, database)","text":"<p>Module to correlate new (&amp; real) HLZ period from E2M data. Only replace the data available in E2M csv.</p> <p>\u26a0\ufe0f Data from E2M may be not accurate... (Issues from Mars 2024)</p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): General information.</p> </li> <li> <p><code>database</code> (df): DataFrame with all formalized data.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>df</code> (df): DataFrame with all formalized data verified by E2M data.</li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = HLZ.set_period('HYHA', '2024')\n\n# Create a sample dataframe 'database' with formalized data\ndatabase = pd.DataFrame({\n    'Date': pd.date_range(start='1/1/2022', periods=10),\n    'HLZ': ['off peak', 'off peak', 'FCR', 'on peak', 'off peak', 'FCR', 'on peak', 'off peak', 'on peak', 'FCR']\n})\n\n# Call the double_verification_E2M method and pass the 'database' as an argument\nresult = obj.double_verification_E2M(database)\n\n# Print the updated 'database' dataframe with the HLZ period verified by E2M data\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/","title":"Import KPI","text":""},{"location":"librairies/kpi_lib/import_kpi/#dependencies","title":"Dependencies","text":"Librairies version pandas 2.2.1 datetime - os -"},{"location":"librairies/kpi_lib/import_kpi/#summary","title":"Summary","text":"<p>Class for importing data from csv file and formating it for the use of this code.\\ class_name : import_data, import_E2M_data, import_price_FCR</p>"},{"location":"librairies/kpi_lib/import_kpi/#import_data","title":"import_data","text":""},{"location":"librairies/kpi_lib/import_kpi/#initself-project-year-none","title":"init(self, project, year) -&gt; None","text":"<p>Initialize the import_data class.</p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>project</code> (str): The project name.</p> </li> <li> <p><code>year</code> (str): The year of the project.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>None</code> (None): No return value.</li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = import_data(project=\"example_project\", year=\"2022\")\n\n# Access the attributes\nprint(\"project:\", obj.project)\nprint(\"year:\", obj.year)\nprint(\"year_short:\", obj.year_short)\n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/#mainself-data_path","title":"main(self, data_path)","text":"<p>Method to import data and format it.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): General information</li> <li><code>data_path</code> (str): The path to the data file.</li> </ul> <p>Returns:</p> <ul> <li><code>df</code> (df): DataFrame with all formatted data.</li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = import_data(project=\"example_project\", year=\"2022\")\n\n# Call the main method with the data path\ndata_path = \"path/to/data.csv\"\nformatted_data = obj.main(data_path)\n\n# Print the formatted data\nprint(formatted_data)\n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/#datetime_columnsself-df","title":"datetime_columns(self, df)","text":"<p>Method to add all datetime information in the df.\\ This format can be add only if column 'Date' in a format datetime is in the df in input.\\ Will add :</p> <ul> <li> <p>the month (in number, ex: 01 for january)\\</p> </li> <li> <p>the week (in number, ex: 45 of this year)\\</p> </li> <li> <p>the day (in number, ex: 18 of march)\\</p> </li> <li> <p>the time (in number, ex: 18:25:35 for hours:minutes:seconde)\\</p> </li> <li> <p>the Date day (in number, ex: 2024-02-18 for the 18th of february 2024)\\</p> </li> <li> <p>the Week day (in number, ex 5 for saturday)\\</p> </li> <li> <p>the year (in number, ex: 2024)\\</p> </li> </ul> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): General information.</p> </li> <li> <p><code>df</code> (df): Dataframe with all formatted data.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>df</code> (df): DataFrame with all formatted data.</li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = import_data(project=\"example_project\", year=\"2022\")\n\n# Call the method with the dataframe \ndf_with_time_columns = obj.datetime_columns(df)\n\n# Print the formatted data\nprint(df_with_time_columns)\n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/#import_csv_grafanaself-data_path","title":"import_csv_grafana(self, data_path)","text":"<p>Method to import data from a CVS. For Grafana data.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): General information.</li> <li><code>data_path</code> (str): The path to the CSV file(s).</li> </ul> <p>Returns:</p> <ul> <li><code>df</code> (df): DataFrame with all formatted data.</li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = import_data(project=\"example_project\", year=\"2022\")\n\n# Call the import_csv method with the data path\ndata_path = \"path/to/data.csv\"\nformatted_data = obj.import_csv_grafana(data_path)\n\n# Print the formatted data\nprint(formatted_data)\n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/#import_csv_smartblueself-data_path","title":"import_csv_smartblue(self, data_path)","text":"<p>Method to import data from a CVS. For smartblue data.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): General information.</li> <li><code>data_path</code> (str): The path to the CSV file(s).</li> </ul> <p>Returns:</p> <ul> <li><code>df</code> (df): DataFrame with all formatted data.</li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = import_data(project=\"example_project\", year=\"2022\")\n\n# Call the import_csv_smartblue method with the data path\ndata_path = \"path/to/data.csv\"\nformatted_data = obj.import_csv_smartblue(data_path)\n\n# Print the formatted data\nprint(formatted_data)\n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/#xlsx_to_csvself-data_path","title":"xlsx_to_csv(self, data_path)","text":"<p>Transform .xlsx/.xls file in .csv and then delete the .xlsx file.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): General information.</li> <li><code>data_path</code> (str): Path where to find the file to replace.</li> </ul> <p>Returns:</p> <ul> <li><code>none</code></li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = import_data(project=\"example_project\", year=\"2022\")\n\n# Call the method with the dataframe \nobj.xlsx_to_csv(data_path)\n\n# No output \n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/#transform_df_tannself-df","title":"transform_df_TANN(self, df)","text":"<p>Module to normalize data from TANN to be used by this code.\\ Add 0 to all 'aux 1', 'aux 2', 'aux 3', 'availability', '15 min data', 'permissible power', '[L]', '[AP2]', 'BESS power', '15mn average power', '15s average power', 'P', 'LMS request discharge' column (fake data).\\ Add the two max on and off peak of this project (enter manually).\\ Format energy in cumulative energy for the year, indeed the energy meter of Tanne reset every day that is not convenient for the computation of our KPIs.\\</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): General information.</li> <li><code>df</code> (df): DataFrame with all formatted data.</li> </ul> <p>Returns:</p> <ul> <li><code>df</code> (df): DataFrame with all formatted data.</li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = import_data(project=\"example_project\", year=\"2022\")\n\n# Call the method with the dataframe \nformatted_df = obj.transform_df_TANN(df)\n\n# Print the formatted data\nprint(formatted_df)\n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/#spec_wern_lmsself-file_path","title":"spec_WERN_LMS(self, file_path)","text":"<p>Module to import data from a CSV file from the LMS in project WERN.</p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): General information.</p> </li> <li> <p><code>file_path</code> (str): Path of the file 'Wernigerode_15min_data_export.csv'.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>df</code> (df): DataFrame with all formalized data.</li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = import_data(project=\"WERN\", year=\"2022\")\n\n# Specify the file path\nfile_path = 'path/to/Wernigerode_15min_data_export.csv'\n\n# Call the spec_WERN_LMS method and pass the 'file_path' as an argument\nresult = obj.spec_WERN_LMS(file_path)\n\n# Print the imported data as a DataFrame\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/#transform_data_brem_wernself-df","title":"transform_data_BREM_WERN(self, df)","text":"<p>Module to normalize data from BREM and WERN to be used by this code.</p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): General information.</p> </li> <li> <p><code>df</code> (df): DataFrame with all formalized data.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>df</code> (df): DataFrame with all formalized data.</li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = import_data(project=\"BREM\", year=\"2022\")\n\n# Create a sample dataframe 'df' with formalized data\ndf = pd.DataFrame({\n    'availability': [1, 1, 0, 1, 0],\n    'other_column': [10, 20, 30, 40, 50]\n    ...\n})\n\n# Call the transform_data_BREM_WERN method and pass the 'df' as an argument\nresult = obj.transform_data_BREM_WERN(df)\n\n# Print the updated 'df' dataframe with the normalized data\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/#class-import_e2m_data","title":"Class import_E2M_data","text":""},{"location":"librairies/kpi_lib/import_kpi/#__init__self-project-year-none","title":"__init__(self, project, year) -&gt; None","text":"<p>Initialize the import_data class.</p> <p>Parameters:</p> <ul> <li> <p><code>project</code> (str): The project name.</p> </li> <li> <p><code>year</code> (str): The year of the project.</p> </li> </ul> <p>Returns:</p> <ul> <li>None</li> </ul> <p>Example:</p> <pre><code>from import_KPI import import_E2M_data\n# Create an instance of the class\nobj = import_E2M_data('ProjectName', '2022')\n\n# Access the project and year attributes\nprint(obj.project)\nprint(obj.year)\n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/#mainself","title":"main(self)","text":"<p>Module to import data and format it.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): General information.</li> </ul> <p>Returns:</p> <ul> <li><code>df</code> (df): DataFrame with all formalized data.</li> </ul> <p>Example:</p> <pre><code>from import_KPI import import_E2M_data\n# Create an instance of the class\nobj = import_E2M_data('ProjectName', '2022')\n\n# Call the main method\nresult = obj.main()\n\n# Print the formatted data DataFrame\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/#import_csvself","title":"import_csv(self)","text":"<p>Module to import data from a CSV file.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): General information.</li> </ul> <p>Returns:</p> <ul> <li><code>df</code> (df): DataFrame with all formalized data.</li> </ul> <p>Example:</p> <pre><code>from import_KPI import import_E2M_data\n# Create an instance of the class\nobj = import_E2M_data('ProjectName', '2022')\n\n# Call the import_csv method\nresult = obj.import_csv()\n\n# Print the imported data as a DataFrame\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/#transform_dataself-df","title":"transform_data(self, df)","text":"<p>Module to transform data.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): General information.</li> <li><code>df</code> (df): DataFrame with all formalized data.</li> </ul> <p>Returns:</p> <ul> <li><code>df</code> (df): DataFrame with all formalized data.</li> </ul> <p>Example:</p> <pre><code>from import_KPI import import_E2M_data\n# Create an instance of the class\nobj = import_E2M_data('ProjectName', '2022')\n\n# Call the import_csv method to get the initial DataFrame\ndf = obj.import_csv()\n\n# Call the transform_data method\ndf_transformed = obj.transform_data(df)\n\n# Print the transformed DataFrame\nprint(df_transformed)\n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/#datetime_columnsself-df_1","title":"datetime_columns(self, df)","text":"<p>Module to add datetime columns to the DataFrame.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): General information.</li> <li><code>df</code> (df): DataFrame with all formalized data.</li> </ul> <p>Returns:</p> <ul> <li><code>df</code> (df): DataFrame with all formalized data.</li> </ul> <p>Example:</p> <pre><code>from import_KPI import import_E2M_data\n# Create an instance of the class\nobj = import_E2M_data('ProjectName', '2022')\n\n# Call the import_csv method to get the initial DataFrame\ndf = obj.import_csv()\n\n# Call the transform_data method\ndf_transformed = obj.transform_data(df)\n\n# Call the datetime_columns method\ndf_with_datetime = obj.datetime_columns(df_transformed)\n\n# Print the transformed DataFrame with datetime columns\nprint(df_with_datetime)\n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/#import_price_fcr","title":"import_price_FCR","text":""},{"location":"librairies/kpi_lib/import_kpi/#__init__self-none","title":"__init__(self) -&gt; None","text":"<p>Initialize the import_price_FCR class.</p> <p>Parameters:</p> <ul> <li>None</li> </ul> <p>Returns:</p> <ul> <li>None</li> </ul>"},{"location":"librairies/kpi_lib/import_kpi/#get_priceself","title":"get_price(self)","text":"<p>Module to get the FCR price.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): General information.</li> </ul> <p>Returns:</p> <ul> <li><code>dict_price</code> (dict): Dictionary with FCR prices.</li> </ul> <p>Example:</p> <pre><code>from import_KPI import import_price_FCR\n# Create an instance of the class\nobj = import_price_FCR()\n\n# Call the get_price method\nprice_list = obj.get_price()\n\n# Print the FCR prices as a dictionary\nprint(price_list)\n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/#import_dataself","title":"import_data(self)","text":"<p>Module to import data from an Excel file. Excel file found here :  <p>\u26a0\ufe0f File create by a human may have error/ name change. Need to be careful. File identify by 'TRK' only to prevent change name. </p> <p>Parameters:</p> <ul> <li><code>self</code> (self): General information.</li> </ul> <p>Returns:</p> <ul> <li><code>xl</code> (pd.ExcelFile): Excel file object.</li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = import_price_FCR()\n\n# Call the import_data method\nresult = obj.import_data()\n\n# Print the Excel file object\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/import_kpi/#transform_dataself-xl","title":"transform_data(self, xl)","text":"<p>Module to transform data from the Excel file.</p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): General information.</p> </li> <li> <p><code>xl</code> (pd.ExcelFile): Excel file object.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>dict_price</code> (dict): Dictionary with transformed price data.</li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = import_price_FCR()\n\n# Call the import_data method to get the Excel file object\nxl = obj.import_data()\n\n# Call the transform_data method\nresult = obj.transform_data(xl)\n\n# Print the transformed price data as a dictionary\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi/","title":"KPI","text":""},{"location":"librairies/kpi_lib/kpi/#dependencies","title":"Dependencies","text":"Librairies version parameters_project.py (local) - numpy 1.26.4 datetime - pandas 2.2.1"},{"location":"librairies/kpi_lib/kpi/#summary","title":"Summary","text":"<p>Class with all method for calculation of KPIs in this code.\\ class_name : BASIC_KPI FCR</p>"},{"location":"librairies/kpi_lib/kpi/#basic-kpi-class","title":"BASIC KPI Class","text":"<p>Class in order to calculate the KPI. See BASIC_KPI</p>"},{"location":"librairies/kpi_lib/kpi/#fcr-class","title":"FCR Class","text":"<p>Class in order to calculate the KPI for FCR. See FCR</p>"},{"location":"librairies/kpi_lib/kpi_plot/","title":"KPI plot","text":""},{"location":"librairies/kpi_lib/kpi_plot/#dependencies","title":"Dependencies","text":"Librairies version parameters_project.py (local) - KPI.py (local) - pandas 2.2.1 plotly.graph_objects 5.20.0 plotly.subplots 5.20.0"},{"location":"librairies/kpi_lib/kpi_plot/#summary","title":"Summary","text":"<p>Class create plots from KPIs.py. Use the KPI.py library to generate the data. Normal size of an image 1200x800 px.\\ class_name : plot_KPI</p>"},{"location":"librairies/kpi_lib/kpi_plot/#general-variable","title":"General variable","text":"Color Hex Code Color Sample DARK_BLUE '#001A70' \u25a0 MEDIUM_BLUE '#1057C8' \u25a0 LIGHT_BLUE '#1089FF' \u25a0 MEDIUM_GREY '#666666' \u25a0 LIGHT_GREY '#E0E0E0' \u25a0 DARK_GREEN '#4F9E30' \u25a0 MEDIUM_GREEN '#88D910' \u25a0 LIGHT_GREEN '#C0E410' \u25a0 DARK_ORANGE '#FE5716' \u25a0 MEDIUM_ORANGE '#FF861D' \u25a0 LIGHT_ORANGE '#FFB210' \u25a0 BLACK '#000000' \u25a0 DARK_GREY '#333333' \u25a0 TOTAL '#2E603F' \u25a0 WARRANTY '#813640' \u25a0 <p>TITLE_FONT_SIZE = 25 TICK_FONT_SIZE = 20 AXIS_FONT_SIZE = 23 TEXT_FONT_SIZE = 20 LEGEND_FONT_SIZE = 20 LEGEND_FONT_SIZE_S = 15</p>"},{"location":"librairies/kpi_lib/kpi_plot/#general-methods","title":"General methods","text":""},{"location":"librairies/kpi_lib/kpi_plot/#hex_opacityhex_color-opacity","title":"hex_opacity(hex_color, opacity)","text":"<p>Transforms a color with the selected opacity.</p> <p>Parameters:</p> <ul> <li><code>hex_color</code> (str): The hexadecimal color code (e.g., \"#RRGGBB\").</li> <li><code>opacity</code> (float): The opacity value between 0 and 1, where 0 represents the normal color and 1 represents full transparency.</li> </ul> <p>Returns:</p> <ul> <li><code>new_hex_color</code> (str): The new hexadecimal color code with the specified opacity.</li> </ul> <p>Example:</p> <pre><code># Call the hex_opacity function\nresult = hex_opacity(\"#001A70\", 0.5)\n\n# Print the new hexadecimal color code with opacity\nprint(result)\n</code></pre> Hex Code Result \u25a0 \u25a0"},{"location":"librairies/kpi_lib/kpi_plot/#check_colorcolor","title":"check_color(color)","text":"<p>Check if the color selected is available, otherwise raise an error. Verification for each methods in the class plot_KPI. </p> <p>Parameters:</p> <ul> <li><code>color</code> (str): The str color entered.</li> </ul> <p>Returns:</p> <ul> <li><code>KeyError</code> (error): If str color is not ['blue' or 'orange' or 'green'].</li> </ul> <p>Example:</p> <pre><code>import KPI_plot \n# Call the color_check function\nKPI_plot.check_color('blue')\n&gt;&gt; pass\n# Call the color_check function\nKPI_plot.check_color('Blue')\n&gt;&gt; KeyError (Invalid color, please select color available : 'blue', 'orange', 'green')\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_plot/#class-plot_kpi","title":"Class plot_KPI","text":""},{"location":"librairies/kpi_lib/kpi_plot/#initself-database-project-year-none","title":"init(self, database, project, year) -&gt; None","text":"<p>Initialize the import_data class.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): General information</li> <li><code>database</code> (df): Database used for calculation of the KPIs</li> <li><code>project</code> (str): The project name.</li> <li><code>year</code> (str): The year of the project.</li> </ul> <p>Returns:</p> <ul> <li><code>None</code> (None): No return value.</li> </ul> <p>Example:</p> <pre><code># Create an instance of the class\nobj = plot_KPI(database=database, project=\"HYHA\", year=\"2024\")\n\n# Access the attributes\nprint(\"project:\", obj.project)\nprint(\"year:\", obj.year)\nprint(\"year_short:\", obj.year_short)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_plot/#analyze_load_plotself-colorblue","title":"analyze_load_plot(self, color='blue')","text":"<p>Module for plot the load curve for a certain project in a certain period.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_analyze_load</code> (go.Figure): Figure containing the plot of the load curve</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').analyze_load_plot().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#aux_plotself-colorblue","title":"aux_plot(self, color='blue')","text":"<p>Module for plot the auxiliaries consumption graph for a certain project in a certain period.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_aux_cons</code> (go.Figure): Figure contain plot of the auxiliaries consumption</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').aux_plot().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#aux_contentself-colorblue","title":"aux_content(self, color='blue')","text":"<p>Module for table the auxiliaries content for a certain project.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_aux_content</code> (go.Figure): Figure contain content on each aux_N</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').fig_aux_content().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#aux_energyself-colorblue","title":"aux_energy(self, color='blue')","text":"<p>Module for plot energy from the auxiliaries for a certain project.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_ener_aux</code> (go.Figure): Figure contain bar of energy per month</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').aux_energy().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#peak_miss_tableself-colorblue","title":"peak_miss_table(self, color='blue')","text":"<p>Module for plot the table of missed peak for a certain project in a certain period.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_peak_miss</code> (go.Figure): Figure contain table of the peak missed. Normally empty.</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').peak_miss_table().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#soc_plotself-colorblue","title":"soc_plot(self, color='blue')","text":"<p>Module for plot the graph of average and cumulative SoC for a certain project in a certain period.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_soc</code> (go.Figure): Figure contain graph of the SOC</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').soc_plot().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#soc_sorted_plotself-colorblue","title":"soc_sorted_plot(self, color='blue')","text":"<p>Module for plot the graph of average, min and max SoC for a certain project for each HLZ period in a month.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_soc_sorted</code> (go.Figure): Figure contain graph of the SOC sorted by type HLZ ('on peak', 'off peak', 'FCR')</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').soc_sorted_plot().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#energy_warranty_plotself-colorblue","title":"energy_warranty_plot(self, color='blue')","text":"<p>Module for plot the compared value of cumulative energy and warranty cumulative energy.\\</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_energy_warranty_poc_month</code> (go.Figure): Figure contain graph of the energy at POC + cumulative energy compared to warranty energy</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').energy_warranty_plot().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#energy_poc_plotself-colorblue","title":"energy_poc_plot(self, color='blue')","text":"<p>Module for plot the graph of energy at POC for a certain project in a certain period.\\</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_energy_poc_month</code> (go.Figure): Figure contain graph of the energy at POC + cumulative energy compared to warranty energy</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').energy_poc_plot().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#energy_sorted_plotself-colorblue","title":"energy_sorted_plot(self, color='blue')","text":"<p>Module for plot the graph of energy at POC sorted by period for a certain project in a certain period.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_energy_poc_month_sorted</code> (go.Figure): Figure contain graph of the energy at POC for each period</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').energy_sorted_plot().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#number_cycle_plotself-colorblue","title":"number_cycle_plot(self, color='blue')","text":"<p>Module for plot the graph of number of cycle for a certain project in a certain period.\\ Cycle Compute with EOL value like : = Energy discharged in a month/EOL.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_number_cycle</code> (go.Figure): Figure contain graph of the number of cycle per period</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').number_cycle_plot().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#availability_plotself-colorblue","title":"availability_plot(self, color='blue')","text":"<p>Module for plot the graph of percentage of availability for a certain project in a certain period.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_availability</code> (go.Figure): Figure contain graph of the percentage of availability</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').availability_plot().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#summary_kpi_past_year_tableself-colorblue","title":"summary_KPI_past_year_table(self, color='blue')","text":"<p>Module for plot the table of summarized KPI from the previous years for a certain project.\\ Data used are stored in excel parameters of the specific project, don't touch here to change it.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_summary</code> (go.Figure): Figure contain table of the KPI summarized</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').summary_KPI_past_year_table().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#overview_tableself-colorblue","title":"overview_table(self, color='blue')","text":"<p>Module for plot the table of Overview KPIs and warranty for a certain project.\\ Data used are stored in excel parameters of the specific project, don't touch here to change it.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_overview</code> (go.Figure): Figure contain table of the overviewed KPIs</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').overview_table().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#load_max_plotself-colorblue","title":"load_max_plot(self, color='blue')","text":"<p>Module for plot the table of Pmax on/off peak for a certain project.\\ Useful to know if project atipycal or not.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_load_max</code> (go.Figure): Figure contain table of the Pmax on/off peak + atipycal values</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').load_max_plot().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#event_dayself-colorblue","title":"event_day(self, color='blue')","text":"<p>FCR method\\ Module for plot the event days and event days after schedule for a certain project.\\ Useful to know how many day after schedule we do. Warranty to respect.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_event_day</code> (go.Figure): Figure contain plot of event day per month</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').event_day().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#event_countself-colorblue","title":"event_count(self, color='blue')","text":"<p>FCR method\\ Module for plot the number of event charge and discharge for a certain project.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_event</code> (go.Figure): Figure contain plot of number event charge/discharge per month</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').event_count().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#event_energyself-colorblue","title":"event_energy(self, color='blue')","text":"<p>FCR method\\ Module for plot the energy from a charge or discharge event for a certain project.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_ener_event</code> (go.Figure): Figure contain plot of energy charge and discharge event per month in MWh</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').event_energy().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#period_time_pie_chartself-colorblue","title":"period_time_pie_chart(self, color='blue')","text":"<p>Module for plot the pie chart of hours for periods in the selected month.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_period</code> (go.Figure): Figure pie chart percentage of period for this month</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').period_time_pie_chart().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_plot/#period_overview_plotself-colorblue","title":"period_overview_plot(self, color='blue')","text":"<p>Module for plot overview of hours for periods in the selected year.</p> <p>Parameter:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>color</code> (str): General color of the plot. Available ['blue', 'orange', 'green']</p> </li> </ul> <p>Return:</p> <ul> <li><code>fig_period_overview</code> (go.Figure): Figure of the period percentage for this year per month</li> </ul> <p>Example:</p> <pre><code>plot_KPI(database, 'HYHA', '2024').period_overview_plot().show()\n# return :\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_py/","title":"KPI.py","text":""},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/","title":"BASIC KPI class","text":""},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/#init-self-database-period","title":"init (self, database, period)","text":"<p>Initialize the class. Get the first and last date available in the database.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): General information</li> <li><code>database</code> (df): The DataFrame representing the database.</li> <li><code>period</code> (str): The period information.</li> </ul> <p>Returns:</p> <ul> <li><code>None</code> (None): No return value.</li> </ul> <p>Example:</p> <pre><code>from KPI import BASIC_KPI\n# Create a DataFrame representing the database\ndatabase = pd.DataFrame({'SOC': [1, 2, 3], '15 min data': [4, 5, 6]})\n\n# Create an instance of the class\nobj = BASIC_KPI(database, 'month')\n\n# Access the attributes\nprint(\"df:\", obj.df)\nprint(\"period:\", obj.period)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/#soc-self-soc_warranty","title":"SOC (self, soc_warranty)","text":"<p>Method for compute min, max and mean of the SoC for a certain project in a certain period.\\ Use for have the warranty on the SoC too.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): Dataframe general, period.</li> <li><code>soc_warranty</code> (int): SoC mean constraint by the warranty.</li> </ul> <p>Returns:</p> <ul> <li><code>soc_min</code> (int - column in df): DataFrame of the minimum SoC for a certain period.</li> <li><code>soc_max</code> (int - column in df): DataFrame of the maximum SoC for a certain period.</li> <li><code>soc_mean</code> (int - column in df): DataFrame of the average SoC for a certain period.</li> <li><code>soc_cumulative</code> (int - column in df): DataFrame of the cumulative average SoC for a certain period.</li> <li><code>soc_warranty_month</code> (int - column in df): Warranty SoC per month for this specific project.</li> </ul> <p>Example:</p> <pre><code>from KPI import BASIC_KPI\n# Create an instance of the class\nobj = BASIC_KPI(database, 'month')\n\n# Call the SOC method with the soc_warranty value\nsoc_results = obj.SOC(soc_warranty=80)\n\n# Print the SOC results\nprint(soc_results)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/#soc_sorted-self","title":"SOC_sorted (self)","text":"<p>Method for compute min, max and mean of the SoC sorted by period for a certain project in a certain period.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): Dataframe general, period.</li> </ul> <p>Returns:</p> <ul> <li><code>soc_min_HLZ</code> (int - column in df): DataFrame of the minimum SoC for a certain period. With HLZ = 'FCR', 'on peak', 'off peak'.</li> <li><code>soc_max_HLZ</code> (int - column in df): DataFrame of the maximum SoC for a certain period. With HLZ = 'FCR', 'on peak', 'off peak'.</li> <li><code>soc_mean_HLZ</code> (int - column in df): DataFrame of the average SoC for a certain period. With HLZ = 'FCR', 'on peak', 'off peak'.</li> <li><code>month</code> (int - column in df): Month number for the data in the df.</li> </ul> <p>Example:</p> <pre><code>from KPI import BASIC_KPI\n# Create an instance of the class\nobj = BASIC_KPI(database, 'month')\n\n# Call the SOC_sorted method\nsoc_sorted_results = obj.SOC_sorted()\n\n# Print the SOC sorted results\nprint(soc_sorted_results)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/#energy-self-ener_dis_warranty","title":"energy (self, ener_dis_warranty)","text":"<p>Compute energy consumed, delivered and lost per month. The values stored are the cumulative energy at POC.\\ Value in MWh.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): Dataframe general, period.</li> <li><code>ener_dis_target</code> (int): Energy discharge target by the warranty contract.</li> <li><code>ener_dis_max</code> (int): Energy discharge max authorize by the warranty without losing the warranty. </li> </ul> <p>Returns:</p> <ul> <li><code>consumed</code> (float - column in df): Energy consumed during the selected period at POC in MWh.</li> <li><code>delivered</code> (float - column in df): Energy delivered during the selected period at POC in MWh.</li> <li><code>losses</code> (float - column in df): Energy losses by the system (consumed - delivered) in MWh.</li> <li><code>losses_%</code> (float - column in df): Percentage of energy loss by the system.</li> <li><code>ener_cumul</code> (float - column in df): Energy delivered cumulative at POC in MWh.</li> <li><code>ener_target</code> (float - column in df): Energy per month target by the warrranty of the selected project.</li> <li><code>ener_max</code> (float - column in df): Energy per month max authorized by the warrranty of the selected project.</li> <li><code>difference_target</code> (float - column in df): Difference of energy between ener_cumul and ener_target in MWh.</li> <li><code>difference_max</code> (float - column in df): Difference of energy between ener_cumul and ener_max in MWh.</li> </ul> <p>Example:</p> <pre><code>from KPI import BASIC_KPI\n# Create an instance of the class\nobj = BASIC_KPI(database, 'month')\n\n# Call the energy method with the ener_dis_warranty value\nenergy_results = obj.energy(ener_dis_target=100, ener_dis_max=300)\n\n# Print the energy results\nprint(energy_results)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/#energy_sorted-self","title":"energy_sorted (self)","text":"<p>Compute energy consumed, delivered per month sorted by type of period (on peak, off peak, FCR). The values stored are the cumulative energy at POC and are returned in MWh.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): Dataframe general, period.</li> </ul> <p>Returns:</p> <ul> <li><code>consumed_FCR</code> (float - column in df): Energy consumed during the FCR period at POC in MWh.</li> <li><code>consumed_on peak</code> (float - column in df): Energy consumed during the on peak period at POC in MWh.</li> <li><code>consumed_off peak</code> (float - column in df): Energy consumed during the off peak period at POC in MWh.</li> <li><code>delivered_FCR</code> (float - column in df): Energy delivered during the FCR period at POC in MWh.</li> <li><code>delivered_on peak</code> (float - column in df): Energy delivered during the on peak period at POC in MWh.</li> <li><code>delivered_off peak</code> (float - column in df): Energy delivered during the off peak period at POC in MWh.</li> </ul> <p>Example:</p> <pre><code>from KPI import BASIC_KPI\n# Create an instance of the class\nobj = BASIC_KPI(database, 'month')\n\n# Call the energy_sorted method\nenergy_sorted_results = obj.energy_sorted()\n\n# Print the energy sorted results\nprint(energy_sorted_results)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/#number_cycle-self-energy_eol","title":"number_cycle (self, energy_eol)","text":"<p>Calculate the number of cycles done per month. Cycle Compute with EOL value like : = Energy discharged in a month/EOL.</p> <p>Parameter:</p> <ul> <li><code>self</code> (self): Dataframe general, period.</li> <li><code>energy_eol</code> (int): Energy at end of life (EOL) for calculation.</li> </ul> <p>Return:</p> <ul> <li><code>cycle_num</code> (int - column in df): Number of cycles with EOL.</li> </ul> <p>Example:</p> <pre><code>from KPI import BASIC_KPI\n# Create an instance of the class\nobj = BASIC_KPI(database, 'month')\n\n# Call the number_cycle method with the energy_eol value\ncycle_results = obj.number_cycle(energy_eol=1000)\n\n# Print the number of cycles\nprint(cycle_results)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/#availability-self","title":"availability (self)","text":"<p>Method for computing the availability for a certain project in a certain period.</p> <p>Parameter:</p> <ul> <li><code>self</code> (self): Dataframe general, period.</li> </ul> <p>Returns:</p> <ul> <li><code>availability</code> (int - column in df): DataFrame of the average availability for a certain period.</li> </ul> <p>Example:</p> <pre><code>from KPI import BASIC_KPI\n# Create an instance of the class\nobj = BASIC_KPI(database, 'month')\n\n# Call the availability method\navailability_results = obj.availability()\n\n# Access the availability column in the results\navailability_column = availability_results['availability']\n\n# Print the availability column\nprint(availability_column)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/#number_peak_miss-self","title":"number_peak_miss (self)","text":"<p>Save in a dataFrame the date of missed peak. Theorically this dataFrame will be empty, no peak missed in normal mode.</p> <p>Parameter:</p> <ul> <li><code>self</code> (self): Dataframe general, period.</li> </ul> <p>Returns:</p> <ul> <li><code>Date</code> (datetime - column in df): Date of the selected row.</li> <li><code>15 min data</code> (float - column in df): Power from last 15 minutes in kW.</li> <li><code>permissible power</code> (float - column in df): Power maximal to not exceed during peak shave in kW.</li> <li><code>power_misses</code> (float - column in df): Amount of power more than the permissible power.</li> </ul> <p>Example:</p> <pre><code>from KPI import BASIC_KPI\n# Create an instance of the class\nobj = BASIC_KPI(database, 'month')\n\n# Call the number_peak_miss method\npeak_miss_results = obj.number_peak_miss()\n\n# Access the columns in the results\ndate_column = peak_miss_results['Date']\ndata_column = peak_miss_results['15 min data']\npermissible_power_column = peak_miss_results['permissible power']\npower_misses_column = peak_miss_results['power_misses']\n\n# Print the columns\nprint(\"Date:\", date_column)\nprint(\"15 min data:\", data_column)\nprint(\"Permissible power:\", permissible_power_column)\nprint(\"Power misses:\", power_misses_column)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/#peak_successself-projectstr","title":"peak_success(self, project:str)","text":"<p>Save in a table all the peak shave. Definition of a peak shave is : </p> <ul> <li>All peak when the battery is on 'on peak' period that imply a discharge of the batterie</li> <li>if several peak shave within 15 min from the riseing edge of the first peak is count as 1 peak (see graph below) </li> <li>All peak higher than 2% of the nominal energy (nominal power * 1 hour) </li> </ul> <p></p> <p>Parameter:</p> <ul> <li><code>self</code> (self): Dataframe general, period.</li> <li><code>project</code> (str): Name of the project selected.</li> </ul> <p>Returns:</p> <ul> <li><code>Date</code>(datetime - column in df): Date of the selected peak.</li> <li><code>ener_peak</code>(float - column in df): Energy used to shave the peak [kWh].</li> <li><code>month</code>(int - column in df): Month of the date. </li> </ul> <pre><code>from KPI import BASIC_KPI\n# Create an instance of the class\nobj = BASIC_KPI(database, 'month')\n\n# Call the number_peak_miss method\npeak_shave = obj.peak_sucess(\"HYHA\")\n\n# Access the columns in the results\ndate_column = peak_shave ['Date']\nener_column = peak_shave ['ener_peak']\nmonth_column = peak_shave ['month']\n\n# Print the columns\nprint(\"Date:\", date_column)\nprint(\"Energy:\", ener_column)\nprint(\"month:\", month_column)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/#analyse_load_curve_dso-self","title":"analyse_load_curve_dso (self)","text":"<p>Method for computing min, max, and mean of the load for a certain project in a certain period.The 15 min data are for the past 15 minutes not the next 15 minutes. </p> <p>Parameter:</p> <ul> <li><code>self</code> (self): Dataframe general, period.</li> </ul> <p>Returns:</p> <ul> <li><code>load_curve</code> (df): DataFrame of the load for a certain period.</li> <li><code>load_curve_mean</code> (df): DataFrame of the average load for a certain period in kW.</li> <li><code>load_curve_min</code> (df): DataFrame of the minimum load for a certain period in kW.</li> <li><code>load_curve_max</code> (df): DataFrame of the maximum load for a certain period in kW.</li> </ul> <p>Example:</p> <pre><code>from KPI import BASIC_KPI\n# Create an instance of the class\nobj = BASIC_KPI(database, 'month')\n\n# Call the analyse_load_curve_dso method\nload_curve, load_curve_mean, load_curve_min, load_curve_max = obj.analyse_load_curve_dso()\n\n# Print the load curves\nprint(\"Load Curve:\")\nprint(load_curve)\n\nprint(\"Load Curve Mean:\")\nprint(load_curve_mean)\n\nprint(\"Load Curve Min:\")\nprint(load_curve_min)\n\nprint(\"Load Curve Max:\")\nprint(load_curve_max)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/#analyse_load_max-self-to_atypic10","title":"analyse_load_max (self, to_atypic=10)","text":"<p>Method for computing the maximum peak in on/off peak of the load for a certain project in a certain period. Computes if atypical or not.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): Dataframe general, period.</li> <li><code>to_atypic</code> (int)(default 10): Percentage of delta to reach for being atypical for a certain project. Information can be found in the parameters project file.</li> </ul> <p>Returns:</p> <ul> <li><code>pmax_off/on_peak</code> (float - columns in df): Value maximum found in the month (off peak is all period except on peak).</li> <li><code>date_pmax_off/on_peak</code> (datetime - columns in df): Date where the maximum peak appears in kW.</li> <li><code>delta</code> (float - columns in df): In percent, the difference between both on/off peak.</li> <li><code>atypical</code> (str - columns in df): If status atypical is reached (delta &gt; %).</li> </ul> <p>Example:</p> <pre><code>from KPI import BASIC_KPI\n# Create an instance of the class\nobj = BASIC_KPI(database, 'month')\n\n# Call the analyse_load_max method\nload_max_results = obj.analyse_load_max(to_atypic=20)\n\n# Print the load max results\nprint(load_max_results)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/#auxiliaries_consumption-self","title":"auxiliaries_consumption (self)","text":"<p>Method for calculation of auxiliary consumption.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): Dataframe general, period</li> </ul> <p>Returns:</p> <ul> <li><code>aux_min_N</code> (float - columns in df ): DataFrame of all minimum value from aux 1, 2, 3 (=N) for the period given</li> <li><code>aux_max_N</code> (float - columns in df ): DataFrame of all maximum value from aux 1, 2, 3 (=N) for the period given</li> <li><code>aux_mean_N</code> (float - columns in df ): DataFrame of all average value from aux 1, 2, 3 (=N) for the period given</li> <li><code>aux_min_tot</code> (float - columns in df ): DataFrame of total minimum value from aux 1, 2, 3 for the period given</li> <li><code>aux_max_tot</code> (float - columns in df ): DataFrame of total maximum value from aux 1, 2, 3 for the period given</li> <li><code>aux_mean_tot</code> (float - columns in df ): DataFrame of total average value from aux 1, 2, 3 for the period given</li> </ul> <p>Example:</p> <pre><code>from KPI import BASIC_KPI\n# Create an instance of the class\nobj = BASIC_KPI(database, 'month')\n\n# Call the auxiliaries consumption \naux_cons = obj.auxiliaries_consumption()\n\n# Print auxiliaries consumption \nprint(aux_cons)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/#aux_energy-self","title":"aux_energy (self)","text":"<p>Compute energy consumed from auxiliaries per month.</p> <p>Parameter:</p> <ul> <li><code>self</code> (self): Dataframe general, period</li> </ul> <p>Returns:</p> <ul> <li><code>ener_aux_N</code> (float): Value of auxiliaries 1, 2, 3 (=N) energy for the selected period. Values are in kWh</li> <li><code>ener_auxs</code> (float): Value of the total energy from auxiliaries 1, 2, 3. Values are in kWh</li> </ul> <p>Example:</p> <pre><code>from KPI import BASIC_KPI\n# Create an instance of the class\nobj = BASIC_KPI(database, 'month')\n\n# Call the aux_energy method\nresult = obj.aux_energy()\n\n# Print the result\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/#summary-self-project-year","title":"summary (self, project, year)","text":"<p>Method for compare summary of KPIs from previous year.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): Dataframe general, period</li> <li><code>project</code> (str): Name of the selected project</li> <li><code>year</code> (str): Year of the selected project</li> </ul> <p>Returns:</p> <ul> <li><code>KPI</code> (str - column in df): KPIs name summarized</li> <li><code>Actual year</code> (values - column in df): Value of KPIs for the selected year</li> <li><code>Years-N</code> (values - column in df): Value of KPIs for years-N of the selected year Information of available years in the parameters_project excel file</li> <li><code>warranty</code> (values - column in df): Values where warranty is stored (if needed) otherwise copy of the 2024 column</li> <li><code>group</code> (int - column in df): Group number to sorted in the table</li> </ul> <p>Example:</p> <pre><code>from KPI import BASIC_KPI\n# Create an instance of the class\nmy_instance = BASIC_KPI(database, 'month')\n\n# Call the summary method with the appropriate arguments\nresult = my_instance.summary(\"MyProject\", \"2022\")\n\n# Print the result\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/#period_time-self-month_short","title":"period_time (self, month_short)","text":"<p>Compute overview of hours per period within the selected month.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): Dataframe general, period</li> <li><code>month_short</code> (str): Number of the month selected</li> </ul> <p>Returns:</p> <ul> <li><code>periods</code> (df): Dataframe with all information (percentage, hours) of period for the month selected</li> </ul> <p>Example:</p> <pre><code>from KPI import BASIC_KPI\n# Create an instance of the class\nmy_instance = BASIC_KPI(database, 'month')\n\n# Call the method with the appropriate arguments\nresult = my_instance.period_time(\"04\")\n\n# Print the result\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/basic_kpi_class/#period_time_overview-self-year-project","title":"period_time_overview (self, year, project)","text":"<p>Compute prediction data with real to get the number of hours per periods for an entire year.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): Dataframe general, period</li> <li><code>year</code> (str): Year selected for the overview</li> <li><code>project</code> (str): Name of the project</li> </ul> <p>Returns:</p> <ul> <li><code>period_time</code> (df): Dataframe with all information (percentage, hours, month, predict, count) of period for the year selected</li> </ul> <p>Example:</p> <pre><code>from KPI import BASIC_KPI\n# Create an instance of the class\nmy_instance = BASIC_KPI(database, 'month')\n\n# Call the method with the appropriate arguments\nresult = my_instance.period_time_overview(\"2024\", \"Myproject\")\n\n# Print the result\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/fcr_class/","title":"FCR class","text":""},{"location":"librairies/kpi_lib/kpi_py/fcr_class/#init-self-database-period","title":"init (self, database, period)","text":"<p>Initialize the class.</p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self):     General information</p> </li> <li> <p><code>database</code> (df):     The DataFrame representing the database.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>None</code> (None):     No return value.</li> </ul> <p>Example:</p> <pre><code>from KPI import FCR\n# Create a DataFrame representing the database\ndatabase = pd.DataFrame({'SOC': [1, 2, 3], '15 min data': [4, 5, 6]})\n\n# Create an instance of the class\nobj = FCR(database, \"2022\")\n\n# Access the attributes\nprint(\"df:\", obj.df)\nprint(\"period:\", obj.period)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/fcr_class/#event_count-self","title":"event_count (self)","text":"<p>Method for finding all discharge/charge events that appear in the selected period.  /!\\ Improvement to do for the selection, need to integer FCR label.</p> <p>Parameter:</p> <ul> <li><code>self</code> (self): Dataframe general, period</li> </ul> <p>Returns:</p> <ul> <li> <p><code>Date Day</code> (datetime): Date of the day</p> </li> <li> <p><code>week</code> (int): Week number</p> </li> <li> <p><code>Week day</code> (int): Number of the day in the week (0 = Monday, ... , 6 = Sunday)</p> </li> <li> <p><code>month</code> (int): Month number of the date</p> </li> <li> <p><code>SOC</code> (float): State of Charge associated with this event</p> </li> <li> <p><code>type</code> (str): Type of the selected row (charge/discharge)</p> </li> <li> <p><code>discharge</code> (int): 1 in the row if it is a discharge event</p> </li> <li> <p><code>charge</code> (int): 1 in the row if it is a charge event</p> </li> </ul> <p>Example:</p> <pre><code>from KPI import FCR\n# Create an instance of your class\nmy_instance = FCR(database, \"2022\")\n\n# Call the event_count method\nresult = my_instance.event_count()\n\n# Print the result\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/fcr_class/#event_day_after_schedule-self-event","title":"event_day_after_schedule (self, event)","text":"<p>Method for finding all discharge/charge events that appear in the selected period.  Sorted by day after schedule (description still to be done).</p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): Dataframe general, period</p> </li> <li> <p><code>event</code> (df): DataFrame with all found events</p> </li> </ul> <p>Returns:</p> <ul> <li> <p><code>Week day</code> (int): Number of the day in the week (0 = Monday, ..., 6 = Sunday)</p> </li> <li> <p><code>month</code> (int): Month number of the date</p> </li> <li> <p><code>discharge</code> (int): 1 in the row if it is a discharge event</p> </li> <li> <p><code>charge</code> (int): 1 in the row if it is a charge event</p> </li> <li> <p><code>day after scheduling event</code> (int): 1 if the selected row (=day) is counted as a day after schedule</p> </li> </ul> <p>Example:</p> <pre><code>from KPI import FCR\n# Create an instance of your class\nmy_instance = FCR(database, \"2022\")\n\n# Assuming you already have the `event` DataFrame from the previous method\n# Call the event_day_after_schedule method with the `event` DataFrame as an argument\nresult = my_instance.event_day_after_schedule(event)\n\n# Print the result\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/fcr_class/#event_day-self-event","title":"event_day (self, event)","text":"<p>Method for finding all discharge/charge events that appear in the selected period.  Sorted by day.</p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): Dataframe general, period</p> </li> <li> <p><code>event</code> (df): DataFrame with all found events</p> </li> </ul> <p>Returns:</p> <ul> <li> <p><code>Week day</code> (int): Number of the day in the week (0 = Monday, ..., 6 = Sunday)</p> </li> <li> <p><code>month</code> (int): Month number of the date</p> </li> <li> <p><code>discharge</code> (int): 1 in the row if it is a discharge event</p> </li> <li> <p><code>charge</code> (int): 1 in the row if it is a charge event</p> </li> <li> <p><code>charge_day</code> (int): 1 if there is a charge event in the day</p> </li> <li> <p><code>discharge_day</code> (int): 1 if there is a discharge event in the day</p> </li> <li> <p><code>event</code> (int): 1 if there is at least one event (charge/discharge) in the day</p> </li> </ul> <p>Example:</p> <pre><code>from KPI import FCR\n# Create an instance of your class\nmy_instance = FCR(database, \"2022\")\n\n# Assuming you already have the `event` DataFrame from the previous method\n# Call the event_day method with the `event` DataFrame as an argument\nresult = my_instance.event_day(event)\n\n# Print the result\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/fcr_class/#energy_eventself","title":"energy_event(self)","text":"<p>Method for found all discharge/charge event energy in the select period.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): Dataframe general, period</li> </ul> <p>Returns:</p> <ul> <li> <p><code>charge_ener</code> (float - column in df): Energy charge during the period selected in MWh </p> </li> <li> <p><code>discharge_ener</code> (float - column in df): Energy discharge during the period selected in MWh</p> </li> </ul> <p>Example:</p> <pre><code>from KPI import FCR\n# Create an instance of your class\nmy_instance = FCR(database, \"2022\")\n\n# Call the method\nresult = my_instance.calculate_event_energy()\n\n# Print the result\nprint(result)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/kpi_fig-class/","title":"KPI_fig class","text":""},{"location":"librairies/kpi_lib/kpi_py/kpi_fig-class/#init-self-namestr-categorystr-rankint-methodstr-figure-change_on_monthfalse","title":"init (self, name:str, category:str, rank:int, method:str, figure, change_on_month=False):","text":"<p>Initialize the class.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): General information</li> <li><code>name</code>(str): Name of the KPI.</li> <li><code>category</code>(str): Category of the KPI.</li> <li><code>rank</code>(int): Rank associated to the position in the pdf of the KPI.</li> <li><code>method</code> (str): Name of the method use for plot this KPI.</li> <li><code>figure</code>(plotly.graph-object.Figure): Store figure of the KPI.</li> <li><code>change_on_month</code>(bool): If the KPI need to be update if the month selected change.</li> </ul> <p>Returns:</p> <ul> <li><code>Object</code> (Object): Object of KPI </li> </ul> <p>Example:</p> <pre><code>from KPI import KPI_fig\n# Create an instance of the class\nfigure_of_my_KPI = KPI_fig('name', 'Overview', 1, 'method_name', figure, True)\n</code></pre> <p>## show_KPI(self):</p> <p>Use for show the KPI plot</p> <p>Parameters:</p> <ul> <li><code>None</code> (None): No return value.</li> </ul> <p>Returns:</p> <ul> <li>Figure display</li> </ul> <p>Example:</p> <pre><code>from KPI import KPI_fig\n# Create an instance of the class\nKPI = KPI_fig('aux_energy', '3_op_sumup', 1, 'aux_energy', figure(\"aux_energy\"), False)\n# Show the KPI figure\nKPI.show_KPI()\n</code></pre> <p></p>"},{"location":"librairies/kpi_lib/kpi_py/kpi_fig-class/#get_categoryself","title":"get_category(self):","text":"<p>Get the category of this KPI. </p> <p>Parameters:</p> <ul> <li><code>None</code> (None): No return value.</li> </ul> <p>Returns:</p> <ul> <li><code>cat</code> (str): Category of the KPI </li> </ul> <p>Example:</p> <pre><code>from KPI import KPI_fig\n# Create an instance of the class\nKPI = KPI_fig('name', 'Overview', 1, 'method_name', figure, True)\n# Show the KPI figure\nKPI.get_category()\n&gt;&gt; 'Overview'\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/kpi_fig-class/#get_figself","title":"get_fig(self):","text":"<p>Get the figure of the KPI. </p> <p>Parameters:</p> <ul> <li><code>None</code> (None): No return value.</li> </ul> <p>Returns:</p> <ul> <li><code>fig</code> (go.Figure()): Return the figure of the KPI </li> </ul> <p>Example:</p> <pre><code>from KPI import KPI_fig\n# Create an instance of the class\nKPI = KPI_fig('name', 'Overview', 1, 'method_name', figure, True)\n# Show the KPI figure\nKPI.get_fig()\n&gt;&gt; go.Figure(figure)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/kpi_fig-class/#get_nameself","title":"get_name(self):","text":"<p>Get the name of the KPI. </p> <p>Parameters:</p> <ul> <li><code>None</code> (None): No return value.</li> </ul> <p>Returns:</p> <ul> <li><code>name</code> (str): Return the name of the KPI </li> </ul> <p>Example:</p> <pre><code>from KPI import KPI_fig\n# Create an instance of the class\nKPI = KPI_fig('name', 'Overview', 1, 'method_name', figure, True)\n# Show the KPI figure\nKPI.get_name()\n&gt;&gt; 'name'\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/kpi_fig-class/#get_rankself","title":"get_rank(self):","text":"<p>Get the rank of the KPI. </p> <p>Parameters:</p> <ul> <li><code>None</code> (None): No return value.</li> </ul> <p>Returns:</p> <ul> <li><code>rank</code> `(int): Return the rank of the KPI </li> </ul> <p>Example:</p> <pre><code>from KPI import KPI_fig\n# Create an instance of the class\nKPI = KPI_fig('name', 'Overview', 1, 'method_name', figure, True)\n# Show the KPI figure\nKPI.get_rank()\n&gt;&gt; '1'\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/kpi_fig-class/#get_pngself","title":"get_png(self):","text":"<p>Get the path to the png of the KPI. </p> <p>Parameters:</p> <ul> <li><code>None</code> (None): No return value.</li> </ul> <p>Returns:</p> <ul> <li><code>path</code> (str): Return the path to the png of the KPI </li> </ul> <p>Example:</p> <pre><code>from KPI import KPI_fig\n# Create an instance of the class\nKPI = KPI_fig('name', 'Overview', 1, 'method_name', figure, True)\n# Show the KPI figure\nKPI.get_png()\n&gt;&gt; '../img/HYHA/name.png'\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/kpi_fig-class/#get_change_on_monthself","title":"get_change_on_month(self):","text":"<p>If the KPI need to be upload if month selected change.    </p> <p>Parameters:</p> <ul> <li><code>None</code> (None): No return value.</li> </ul> <p>Returns:</p> <ul> <li><code>change_on_month</code> (bool): Return True if yes, otherwise False (Default False)</li> </ul> <p>Example:</p> <pre><code>from KPI import KPI_fig\n# Create an instance of the class\nKPI = KPI_fig('name', 'Overview', 1, 'method_name', figure, True)\n# Show the KPI figure\nKPI.get_change_on_month()\n&gt;&gt; 'True'\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/kpi_fig-class/#get_methodself","title":"get_method(self):","text":"<p>Get the method to update the figure  </p> <p>Parameters:</p> <ul> <li><code>None</code> (None): No return value.</li> </ul> <p>Returns:</p> <ul> <li><code>method</code> (str): Name of the method link in plot_KPI class</li> </ul> <p>Example:</p> <pre><code>from KPI import KPI_fig\n# Create an instance of the class\nKPI = KPI_fig('name', 'Overview', 1, 'method_name', figure, True)\n# Show the KPI figure\nKPI.get_method()\n&gt;&gt; 'method_name'\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/kpi_fig-class/#upload_figself-fig","title":"upload_fig(self, fig):","text":"<p>Upload change on the figure of the KPI. </p> <p>Parameters:</p> <ul> <li><code>fig</code> (go.Figure()): New figure to upload</li> </ul> <p>Returns:</p> <ul> <li><code>None</code> (None): No return value.</li> </ul> <p>Example:</p> <pre><code>from KPI import KPI_fig\n# Create an instance of the class\nKPI = KPI_fig('name', 'Overview', 1, 'method_name', figure, True)\n# Show the KPI figure\nKPI.upload_fig(new_fig)\n</code></pre>"},{"location":"librairies/kpi_lib/kpi_py/kpi_fig-class/#downloadself-pathstr-typepng-height800-width1200-scale2","title":"download(self, path:str, type=\"png\", height=800, width=1200, scale=2):","text":"<p>Download in a type the figure of the KPI. Save the path in self.path_to_img</p> <p>Parameters:</p> <ul> <li> <p><code>path</code> (str): Path where to store the png plot</p> </li> <li> <p><code>type</code> (str): Type of file selected (Default : png)</p> <ul> <li>png</li> <li>svg</li> <li>jpg</li> <li>webp</li> <li>pdf</li> <li>eps</li> </ul> </li> <li> <p><code>height</code> (int): Height of the image (Default : 800)</p> </li> <li> <p><code>width</code> (int): Width of the image (Default : 1200)</p> </li> <li> <p><code>scale</code> (int): Scale of the image (Default : 2)</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Finish</code> (Bool): True if the image is exported</li> </ul> <p>Example:</p> <pre><code>from KPI import KPI_fig\n# Create an instance of the class\nKPI = KPI_fig('name', 'Overview', 1, 'method_name', figure, True)\n# Show the KPI figure\nKPI.download('./img/', 'jpg', 1200, 1600, 1)\n&gt;&gt; 'True'\n</code></pre>"},{"location":"librairies/pdf_report_lib/","title":"PDF_Report_lib","text":""},{"location":"librairies/pdf_report_lib/bess_report/","title":"BESS Report Generator","text":""},{"location":"librairies/pdf_report_lib/bess_report/#dependencies","title":"Dependencies","text":"Librairies version FPDF - datetime - emoji - pdf2docx - os - tqdm.tqdm 4.66.2"},{"location":"librairies/pdf_report_lib/bess_report/#summary","title":"Summary","text":"<p>Class create PDF report from KPIs plot. Use the .png file store in the <code>output/kpi_png/{project}/{year}</code> to generate the Report. The report contain a front page and each page of category available for the selected project. class_name : PDF</p>"},{"location":"librairies/pdf_report_lib/bess_report/#methods","title":"Methods","text":""},{"location":"librairies/pdf_report_lib/bess_report/#__init__self-project_name-month_name-plots_folder_path-plots_per_page-first_data_time-last_data_time-sorted_plotstrue","title":"__init__(self, project_name, month_name, plots_folder_path, plots_per_page, first_data_time, last_data_time, sorted_plots=True)","text":"<p>Initializes the object.</p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): Information General</p> </li> <li> <p><code>project_name</code> (str): Name of the project chosen</p> </li> <li> <p><code>month_name</code> (str): Name of the month for the report</p> </li> <li> <p><code>plots_folder_path</code> (str): Path of the folder where the KPIs images are</p> </li> <li> <p><code>plots_per_page</code> (int): Number of plots desired per page [1-6]</p> </li> <li> <p><code>first_data_time</code> (datetime): Time of the first data of the database. Needs to be in ms</p> </li> <li> <p><code>last_data_time</code> (datetime): Time of the last data of the database. Needs to be in ms</p> </li> <li> <p><code>list_figure</code> (df): List of figures to add in the KPI. Need to have column ['name', 'category', 'object']. Get this list from export_data.get_list_fig </p> </li> <li> <p><code>Confidential</code> (bool): Add a confidential text if True (Default: False)</p> </li> <li> <p><code>path_to_cache</code> (str): Path to cache for generated this report (Optionnal)</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Report</code>: The initialized Report object</li> </ul>"},{"location":"librairies/pdf_report_lib/bess_report/#mainself-report_namestr-report_pathstr-categories","title":"main(self, Report_name:str, Report_path:str, categories)","text":"<p>Main method for creating the report. The content includes: - First page - Title for each category - Image for each category</p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): Information General</p> </li> <li> <p><code>Report_name</code> (str): Name of the chosen report</p> </li> <li> <p><code>Report_path</code> (str): Path to export the PDF for the output</p> </li> <li> <p><code>categories</code> (array): Array with all the names of the categories</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Report</code>: The generated Report object</li> </ul>"},{"location":"librairies/pdf_report_lib/bess_report/#category_titleself-titlestr","title":"category_title(self, title:str)","text":"<p>Method for writing the title of the category.</p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>title</code> (str): Name of the title to print</p> </li> </ul> <p>Returns:</p> <ul> <li>None</li> </ul>"},{"location":"librairies/pdf_report_lib/bess_report/#headerself","title":"header(self)","text":"<p>This method is responsible for generating the header section of a document.</p> <p>It includes a custom logo, project name, report date, and other relevant information.</p> <p>Args:</p> <ul> <li><code>self</code>: The instance of the class.</li> </ul> <p>Returns:</p> <ul> <li>None</li> </ul>"},{"location":"librairies/pdf_report_lib/bess_report/#footerself","title":"footer(self)","text":"<p>This method is responsible for generating the footer section of a document.</p> <p>It includes the page numbers.</p> <p>Args:</p> <ul> <li><code>self</code>: The instance of the class.</li> </ul> <p>Returns:</p> <ul> <li>None</li> </ul>"},{"location":"librairies/pdf_report_lib/bess_report/#first_pageself","title":"first_page(self)","text":"<p>This method is responsible for generating the first page of the report.</p> <p>Args:</p> <ul> <li><code>self</code>: The instance of the class.</li> </ul> <p>Returns:</p> <ul> <li><code>first_page</code> (page): Designed first page of the report</li> </ul>"},{"location":"librairies/pdf_report_lib/bess_report/#dimension_kpiself","title":"dimension_KPI(self)","text":"<p>Method for computing the dimension of the KPI plots and the position in the pdf.</p> <p>Parameters:</p> <ul> <li><code>self</code> (self): General information</li> </ul> <p>Returns:</p> <ul> <li> <p><code>fig1_pos_X</code> (int): Initial position of the image for x</p> </li> <li> <p><code>fig1_pos_Y</code> (int): Initial position of the image for y</p> </li> <li> <p><code>fig_width</code> (int): Width of the image</p> </li> <li> <p><code>fig_height</code> (int): Height of the image</p> </li> <li> <p><code>gap_x</code> (int): Gap between image and other component in x</p> </li> <li> <p><code>gap_y</code> (int): Gap between image and other component in y</p> </li> <li> <p><code>comment_space_x</code> (int): Gap for comment in the pdf</p> </li> <li> <p><code>gap_comment_x</code> (int): Ratio for the gap comment</p> </li> <li> <p><code>gap_ratio_x</code> (int): Ratio for the gap_x</p> </li> </ul>"},{"location":"librairies/pdf_report_lib/bess_report/#add_kpi_plotself-plots_per_page","title":"add_KPI_plot(self, plots_per_page)","text":"<p>Method for adding KPI plots of the category.</p> <p>Parameters:</p> <ul> <li> <p><code>self</code> (self): General information</p> </li> <li> <p><code>plots_per_page</code> (int): Number of plots per page</p> </li> </ul> <p>Returns:</p> <ul> <li><code>KPI_plot_page</code> (page): Page where the KPI plots are displayed</li> </ul>"},{"location":"librairies/pdf_report_lib/bess_report/#create_docxself-report_pdf_name-str-report_docx_name-str","title":"create_docx(self, report_pdf_name: str, report_docx_name: str)","text":"<p>Converts a PDF file to a docx file.</p> <p>Args:</p> <ul> <li><code>report_pdf_name</code> (string): The name of the PDF file to convert.</li> <li><code>report_docx_name</code> (string): The name of the docx file to be created.</li> </ul> <p>Returns:</p> <ul> <li><code>cv</code> (docx file): Docx file with the given name in the parameter.</li> </ul>"},{"location":"librairies/pdf_report_lib/bess_report/#constructself-category","title":"construct(self, category)","text":"<p>This method is responsible for constructing a list of pages with plots.</p> <p>It takes into account the specified folder path, number of plots per page, and sorting preference.</p> <p>Args:</p> <ul> <li><code>self</code>: The instance of the class.</li> <li><code>Plot_dir</code> (str): Directory of the graphs to plot.</li> <li><code>graphs_per_page</code> (int): Number of plots per page.</li> <li><code>sorting</code> (bool): Sorted graphs or not.</li> </ul> <p>Returns:</p> <ul> <li><code>List</code>: A list of pages with plots.</li> </ul>"},{"location":"user_guide/","title":"user_guide","text":""},{"location":"user_guide/Data/","title":"Data How it's work ?","text":"<p>You can see this system like a box with input, output and some buttons.  </p> <p>You can have many ressources as long as the file of input is in csv format and have a time in this file.</p> Project support Grafana SmartBlue LMS HYHA BREM WERN TANN"},{"location":"user_guide/Data/#required-tag","title":"Required tag","text":"<p>Those tags are needed to get the KPI monthly report (Normaly if you download all the panel from Grafana/Export you have all the tags available).</p> Tag name Data type 'Time' <code>Timestamp</code> 'aux 1' <code>float</code> 'aux 2' <code>float</code> 'aux 3' <code>float</code> 'availability' <code>int</code> '15 min data' <code>float</code> '15 average power' <code>float</code> 'permissible power' <code>float</code> '[L]' <code>float</code> '[AP2]' <code>float</code> 'BESS power' <code>float</code> 'P' <code>float</code> 'SOC' <code>float</code> 'LMS request discharge' <code>float</code> 'consumed' <code>float</code> 'delivred' <code>float</code>"},{"location":"user_guide/Data/#tutorial-for-getting-data-from-grafana","title":"Tutorial for getting data from Grafana","text":"<ol> <li>Go one the website and open the export dashboard.\\    </li> <li> <p>Select the project you want and the time range.\\</p> </li> <li> <p>For each panel. Go on the 3 dot (left top of the panel). Select Inspect&gt;Data.\\    </p> </li> <li>Now select in the Show data frame : Series joined by time. Untick Formatted data (otherwise the time format in not support by this code) and click on the button \"Download CSV\".\\    </li> <li> <p>Final step is to save this files in the good place. Copy the download files in <code>Data&gt;Data_project&gt;{name of the project}&gt;{year of this data}</code>.\\    I continue with the example, we have download data from the HYHA project in 2024, so I'll saved the data in <code>Data&gt;Data_project&gt;HYHA&gt;2024</code>\\</p> </li> <li> <p>You are able to use the data from Grafana in the report !</p> </li> </ol>"},{"location":"user_guide/Getting_start/","title":"Install environment","text":"<p>It's the first time you download this project ? Welcome ! I'll show you how it's work.\\ For have nice KPI report you will need some libraries, don't worries it's easy \ud83d\ude09\\</p>"},{"location":"user_guide/Getting_start/#install-libraries","title":"Install libraries","text":"<p>Everything for installing libraries will be done in the terminal</p>"},{"location":"user_guide/Getting_start/#enter-in-the-terminal-command-prompt-windows","title":"Enter in the Terminal (command prompt) [Windows]","text":"<ol> <li> <p>Search for the application Command Prompt in your search tab in windows.\\</p> </li> <li> <p>Move until the folder project (use the command line <code>cd</code> to navigate in the path).</p> </li> </ol>"},{"location":"user_guide/Getting_start/#enter-in-the-terminal-command-prompt-vs-code","title":"Enter in the Terminal (command prompt) [VS code]","text":"<ol> <li> <p>Open the terminal tab in VS Code :\\     </p> </li> <li> <p>Open a new command prompt terminal in the terminal tab by select the arrow near the +, and select command prompt:\\     </p> </li> </ol>"},{"location":"user_guide/Getting_start/#install-virtual-environment","title":"Install Virtual environment","text":"<ol> <li>Run the script below within the directory to create your own virtual environment :</li> </ol> <pre><code>python -m venv name_of_Venv\n</code></pre> <ol> <li>Activate your Venv, run next line :</li> </ol> <pre><code>cd name_of_Venv/Scripts\nactivate\n</code></pre> <p>\\ 3) Use ```cd ..``` twice to come back at the main path of the project.\\</p>"},{"location":"user_guide/Getting_start/#install-requirementstxt","title":"Install requirements.txt","text":"<ol> <li> <p>When it's done, go in your Librairies folder :</p> <p><code>cd Librairies</code></p> </li> <li> <p>Now you can install all the needed libraries in your virtual environment. You just need to run this line of code (It will install all the libraries in the requirements.txt file) (You may have to remove the Kaleido library line, we'll install it later):</p> <p><code>pip install -r requirements.txt --trusted-host pypi.org --trusted-host files.pythonhosted.org</code></p> </li> <li> <p>Install Kaleido library also, by using this line of command :</p> <p><code>pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org -U kaleido-0.1.0.post1-py2.py3-none-win_amd64.whl</code></p> </li> </ol>"},{"location":"user_guide/Getting_start/#select-the-environment-for-you-jupyter-notebooks","title":"Select the environment for you jupyter notebooks","text":"<ol> <li> <p>Before running any code, you will need to select the kernel of your virtual environment. Normally just run the first cell and it will propose you the kernel with the name of your virtual environment. If not, you can follow this tuto to do manually : Setting up VS code to use the virtual environment in a jupyter notebook\\</p> </li> <li> <p>To be sure that the installation goes well, you can run the both jupyter notebook in the example folder. You can now enjoy to do monthly report !</p> </li> </ol>"},{"location":"user_guide/Getting_start/#add-to-gitignore","title":"Add to gitignore","text":"<p>.gitignore is useful if you do some developing stuff on this code. To insure that you will not put online your virtual environment (too much data for github), we'll add your virtual environment in the gitignore (git push will ignore the files / folders on this file).\\</p> <ol> <li> <p>Open the file .gitignore.\\</p> </li> <li> <p>Write the name_of_venv created earlier.\\</p> </li> <li> <p>Save the file.\\</p> </li> </ol>"},{"location":"user_guide/architecture/","title":"Architecture","text":"<p>You will find many folders in this project. I'll explain wich are important for you.</p> <ul> <li>.gitBook</li> </ul> <p>Where the md file for this documentation are stored. </p> <ul> <li>.vsCode</li> </ul> <p>Configuration files for Vs Code</p> <ul> <li>00_Report_Generator</li> </ul> <p>The main folders. You will find one notebook that will allow to generate the monthly report of a project very easily.\\ Just follow what it say in this notebook.</p> <ul> <li>01_Examples</li> </ul> <p> The second folders that is useful for you. It list all the specific tool from this code and give a example code to how to use it.</p> <ul> <li>Data</li> </ul> <p>Folder where data of a project is stored. Please refer to Data for an explaination of this folder.</p> <ul> <li>output</li> </ul> <p>[maybe not created yet] Folder where all the output of the code useful for you. You'll find the image of KPI, the report, the appendix. Please, the code manage alone this folder, don't try to modify something inside.</p> <ul> <li>om_tools</li> </ul> <p>Librairies with all functionnalities explained in Librairies. </p> <ul> <li>Others</li> </ul> <p>Legacy of others project before, keeped as an archive. </p> <ul> <li>test</li> </ul> <p>Unlike those folders above, if the feeling of code/test something got you, you can go in this folder and release your creativity ! While you stay in this folder you'll broke nothing. You can found help for libraries on this documentation.</p>"},{"location":"user_guide/architecture/#how-methods-are-linked","title":"How methods are linked","text":""},{"location":"user_guide/virtual_env/","title":"Virtual environment","text":"<p>Follow this step in order to work on your own virtual env locally (don't uploading libraries on Github !). What for ? Setting up a virtual environment when building a python project is an essential step in the development process. A virtual environment allows dependencies to be separated between projects. A dependency is just some sort of module that is required for your project to run properly. As the dependency modules are updated, conflicts can arise between projects if dependencies are shared and the necessary versions are not the same. A virtual environment eliminates these conflicts by allowing the dependencies to be project specific and isolated from the system.</p>"},{"location":"user_guide/virtual_env/#step-to-follow-initialisation-of-virtual-environment-venv","title":"Step to follow initialisation of virtual environment (venv) :","text":"<ol> <li> <p>Run the script below within the directory to create your own virtual environment :</p> <p><code>python -m venv name_of_Venv</code></p> </li> <li> <p>Activate your Venv, run next line :</p> <p><code>cd name_of_Venv/Scripts activate</code></p> </li> <li> <p>You are now in the virtual environment, you can install the libraries required (cf requirements.txt). For install libraries in EDF laptop, you need this next line (avoid restriction from admin) :</p> <p><code>pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org -U name_library</code></p> </li> <li> <p>Run <code>deactivate</code> to stop the virtual environment</p> </li> <li> <p>Initialize the git repo by running <code>git init</code></p> </li> <li> <p>Run the next line to include venv folder in the .gitignore files so the virtual environment is ignored in source control (will not be upload in remote repository) :</p> <p><code>echo name_of_Venv &gt; .gitignore</code></p> </li> </ol>"},{"location":"user_guide/virtual_env/#work-on-the-virtual-environment-visual-code-version","title":"Work on the virtual environment [Visual Code version]:","text":"<ol> <li> <p>Activate your virtual environment :</p> <p><code>cd name_of_Venv/Scripts activate</code></p> </li> <li> <p>Change the select interpreter of visual code : [View&gt; Command palette&gt; Select interpreter&gt; name_of_venv&gt; Pyhon.exe]</p> </li> <li> <p>Desactivate your venv :</p> <p><code>cd name_of_Venv/Scripts deactivate</code></p> </li> </ol>"},{"location":"user_guide/virtual_env/#update-the-list-of-libraries","title":"Update the list of libraries :","text":"<ol> <li> <p>Install libraries you need in your venv :</p> <p><code>pip install --trusted-host pypi.org --trusted-host files.pythonhosted.org -U name_library</code></p> </li> <li> <p>Update the requirements.txt, run the next line :</p> <p><code>pip freeze &gt; requirements.txt</code></p> </li> <li> <p>Insure to add the file in source control :</p> <p><code>git add requirements.txt</code></p> </li> <li> <p>You are able to commit your work (Don't forget to write a clair message for your commit !)</p> </li> </ol>"},{"location":"user_guide/dev_guide/","title":"dev_guide","text":""},{"location":"user_guide/dev_guide/add_kpi/","title":"add_KPI","text":""},{"location":"user_guide/dev_guide/add_kpi/#how-to-add-a-kpi-in-your-report","title":"How to add a KPI in your report","text":"<ol> <li>Develop something (you can test it in the test zone)</li> <li>When it's work add your KPI calculation in the KPI file and the KPI plot code in the KPI_plot.py</li> <li>Remember to do a documentation about the both method you've added</li> <li>In Data&gt;data_project folder, in the KPI_in_report.xlsx, add the name you want for your KPI (\u26a0\ufe0f the name need to be the same as the name of the method in KPI_Plot + _plot at the end, for example: add energy_poc, for the method energy_poc_plot()). Add also the category you want to add your KPI (in the KPI_categories columns). Order matter for the PDF report.</li> <li>Verify that your KPI is well plot in the example notebook.</li> <li>Here it is, you added a new KPI ! Well done \ud83c\udf1f</li> </ol>"},{"location":"user_guide/dev_guide/add_kpi/#documentation","title":"Documentation","text":"<p>Documentation is really important to follow the advance of a project and use it (for both internal and external users). Please follow this step to document the new KPI that you add.</p>"},{"location":"user_guide/dev_guide/add_kpi/#in-method","title":"In method","text":"<p>Your method need also documentation. Useful when you need a fast check during the development of a tool. Please follow this template for document your new method :</p> <pre><code>'''\nMethod's summary ....\n\nParameters:\n----------\nself : self \n    General information \n\nparameters 1 : type\n    comment of parameters 1 \n\nparameters 2 : type\n    comment of parameters 2\n\nReturns:\n----------\nreturns 1 : type\n    comment of returns 1 \n\nreturns 2 : type\n    comment of returns 2\n'''\n</code></pre>"},{"location":"user_guide/dev_guide/add_kpi/#in-online-documentation","title":"In online documentation","text":"<p>Main documentation is on online, please add the documentation in the good pages (sorted by class) and add your method on it. Like before, please follow this template for the documentation of your new method :</p> <pre><code>### method name(self) :\nMethod's summary ..... &lt;br/&gt;\n**Parameters:**\n\n- `self` (self): General information\n\n- `parameters 1` (type): Comment of parameters 1\n\n- `parameters 2` (type): Comment of parameters 2\n\n**Returns:**  \n\n- `returns 1` (type) : Comment in returns 1  \n\n- `returns 2` (type) : Comment in returns 2  \n\n**Example:**  \n\nExample how to use it ....\n</code></pre> <p>That give you this result in html page :</p>"},{"location":"user_guide/dev_guide/add_kpi/#method-nameself","title":"method name(self) :","text":"<p>Method's summary .....\\ Parameters:</p> <ul> <li><code>self</code> (self): General information</li> <li><code>parameters 1</code> (type): Comment of parameters 1</li> <li><code>parameters 2</code> (type): Comment of parameters 2</li> </ul> <p>Returns:</p> <ul> <li><code>returns 1</code> (type) : Comment in returns 1</li> <li><code>returns 2</code> (type) : Comment in returns 2</li> </ul> <p>Example:</p> <pre><code>Example how to use it ....\n</code></pre>"},{"location":"user_guide/dev_guide/add_project/","title":"How to add a project in your report","text":""},{"location":"user_guide/dev_guide/add_project/#local-creation-to-use-datas-of-the-new-project","title":"Local creation to use datas of the new project","text":"<p>In the folder <code>Data/data_project</code>, create a folder with the short name of the new project (ex: WERN for Wernigerode). This name will be use everywhere in the code. Create the folder on the data year and save your csv data files in.</p>"},{"location":"user_guide/dev_guide/add_project/#global-creation-to-be-able-to-use-the-project-with-the-tool","title":"Global creation to be able to use the project with the tool","text":"<ol> <li> <p>In <code>1.EDF DS\\6.OPERATIONS\\1.ALL-PROJECTS\\Tools_AM-OM\\Online_tools\\parameters\\name_of_new_project</code> paste the parameter_project.xlsx and enter the information about this project. Rename this file parameters_name_new_project.xlsx.\\</p> </li> <li> <p>In <code>1. EDF DS\\6.OPERATIONS\\1.ALL-PROJECTS\\Tools_AM-OM\\Online_tools\\PDF_parameters\\images</code> add a new background with the name 'Background_first_page_report_' + name of the new project (ex: Background_first_page_report_WERN.png)\\</p> </li> <li> <p>You're finish to add a new project, enjoy your report for this new one !\\</p> </li> </ol> <p>\u26a0\ufe0f Format: Data Format need to be the same than the other project (see Data format).</p> <p>\ud83d\udca1 Tips: If you have some doubt about the architecture, navigate on the other project folder.</p>"}]}